introduzione ad R-chan
lui dice che in pratica le strutture sono molto simili a C/C++ 
molto usata nell'analisi dei dati, open-source, 
tensorflow e keras per reti neurali in r(vedremo keras perchè è più ad alto livello)
siccome è un linguaggio funzionale non esiste il passaggio per riferimento, x<-5 x<- x+5 crea due oggetti diversi, per avere passaggio per riferimento dobbiamo interfacciarci con altri linguaggi.
tutti gli oggetti hanno una classe di appartenenza, l'unica eccezione è un vettore, che viene identificato come il tipo dei suoi dati e non come vector(sono le l'unità base)
le funzioni sono degli oggetti veri e propri
numeric si può specializzare in interi, double, o complex
5 strutture fondamentali in R= 
	vector (unità base)
	matrix
	array(matrici multidimensionali)
	list(liste di oggetti con possibile tipo diverso)
	data.frame(ogni colonna rappresenta un'osservazione, e ogni riga un particolare record, rappresenta dei dati, tipi diversi)
per stabilire la classe di appartenenza posso usare class() che restituisce un vettore da un solo elemento(teoricamente, perchè in R un'oggetto può avere classi multiple), che dovrebbe essere il nome del tipo, oppure is.{list-function-logical}() che sono funzioni booleane
source per usare gli script
library per caricare un dataset
; per separare più istruzioni in una riga
operatore di assegnamento con operatore freccia a destra o a sinistra, è sconsigliato usare l'uguale perchè non ha un comportamento ben definito , guardare esempio per vedere, uguale all'interno di una funzione assegna soltanto un valore, invece con la freccia abbiamo tutta la lista
il punto non è un carattere speciale, l'utilizzo è incoraggiato, viene usato specie per cose nascoste
ci sono pure le parole riservate che non possono essere usate per le variabili
na valore ignoto, nan una cosa che non è un valore
na si usa per assegnare oggetti senza tipo, is.nan o is.na
na.rm per eliminare tutti gli na
na.action(OMIT o FAIL o PASS) per capire cosa fare con questi oggetti
operatori quasi tutti uguali(%/% quoziente %% resto)
con if dobbiamo usare comunque gli operatori && e ||, invece per operazioni logiche(per esempio su vettori di booleani) si usa il singolo carattere
next sostituisce continue
repeat ciclo infinito

Function.name <- function (argomenti)
{
	corpo della funzione	
	output
}
l'ultima istruzione che viene valutata è l'output

vettori dal punto di vista matematico, come collezione ordinata di oggetti dello stesso tipo, con l'operatore c concateniamo gli elementi che gli passiamo
possiamo usare un vettore per indicizzare un ' altro vettore, -vettore per prendere gli elementi che non appartengono agli indici del vettore dentro le parentesi quadre
possiamo pure mettere delle condizioni(sempre nelle parentesi quadre) per prendere i valori nel vettore che soddisfano le condizioni
le parentesi quadre sono una funzione, è possibile ridefinire qualsiasi operatore

matrix(vettore degli elementi,ncol, nrow, byrow) possiamo specificare o uno o l'altro, se ne specifichiamo solo uno si farà il conto da solo, se mettiamo meno elementi di quanti ce ne dovrebbero essere allora verranno messi na
as.vector e as.matrix per convertire( in matrice con singola colonna nel caso di vettore convertito)
rbind fusione di matrici per righe
cbind per colonne
diag per la diagonale in vettore, o per assegnare alla diagonale o un singolo valore o un vettore contenente i valori da sostituire
range per l'intervallo degli elementi della matrice 
lenght per il numero di elementi totali
dim per le dimensioni
apply prende come parametri la matrice, la dimensione dove lavorare(1 riga,2 colonna) e la funzione che lavora sulla matrice
per calcolare l'inversa usiamo solve, che risolve il sistema lineare
array come estensione delle matrici, costruiamo tensori
indicizzazione con names, il - non funziona più ovviamente perchè i nomi sono delle stringhe
unname per togliere l'indicizzazione
rownames e colnames per dare i nomi alle colonne e alle righe
lista come raccolta di oggetti, anche di tipo diverso, list(elementi da mettere dentro la lista)
si indicizza la lista con le doppie parentesi quadre, perchè se utilizziamo la singola parentesi quadra ci restituisce un subset della lista
lista$nomedell'elemento per prendere l'elemento con quel nome(assegnandogli i nomi con names)
il data.frame è un'estenzione della lista, ogni riga corrisponde ad un punto dati(record), ed ogni colonna(nome) è una variabile(valore che è assunta da quella osservazione), ed allo stesso tempo sono matrici, possiamo per esempio calcolare la trasposta
c'entra la lista perchè un data frame è una lista di colonne(valori)
possiamo accedere agli elementi del data.frame con le parentesi quadre(singole per la restituzione di un data.frame o doppie per un vettore), o l'operatore dollaro 
data.frame$nuovacolonna <- valori con cardinalità compatibile) per fare una nuova colonna
data.frame$nuovacolonna <- NULL per cancellarla
il data.frame ti obbliga ad assegnare nomi alle colonne(ex as.data.frame(matrix) assegna nomi di default V1 V2 ...)
i cast in R non esistono, vengono sostituite con as.oggetto(oggettodaconvertire)
un data frame si può costruire da un insieme di dati esterni(come excel o altro) o internamente a mano da noi