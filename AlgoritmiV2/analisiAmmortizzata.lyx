#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{algorithm} 
\usepackage{algpseudocode} 
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
analisi ammortizzata (CAP 17 libro)
\end_layout

\begin_layout Itemize
Nasce per analizzare sequenze di n operazioni, alcune operazioni prendono
 poco tempo, altre molto tempo, 
\series bold
l'analisi ammortizzata serve a capire quale prevalgono, quello costose e
 quelle poco costose.
\end_layout

\begin_layout Itemize
si ispira a quello che viene fatto in economia, divisione nei costi di spese
 nel tempo, ripartizione, nel nostro caso viene ripartito nelle n operazioni,
 in parti uguali?
\end_layout

\begin_layout Itemize
E.G.
 
\begin_inset Formula $\frac{T(n)}{n}$
\end_inset

 costo ammortizzato per operazione, possiamo decidere anche di ripartirla
 in parti uguali a secondo dell'operazione
\end_layout

\begin_layout Itemize
non è probabilistica ma convenzionale, una media nel caso peggiore, e poi
 si suddivide e si ripartizionano i costi tra tutte le operazioni
\end_layout

\begin_layout Standard
analisi nel caso peggiore abbastanza importante.
\end_layout

\begin_layout Subsection
Metodi
\end_layout

\begin_layout Itemize
aggregazione: non è una tecnica, ci dice di calcolare con approssimazione
\end_layout

\begin_layout Itemize
accantonamenti: stabilire primariamente il costo delle operazioni, se nella
 realtà il costo viene superato vengono usate delle strutture dati per ammortizz
are, esempio del biglietto di andata e ritorno
\end_layout

\begin_layout Itemize
potenziale: metodo più generale(generalizza gli altri due).
 stabilire una funzione che assume valori diversi a seconda della struttura
 dati, il costo della struttura sarà dato a seconda della variazione della
 funzione di potenziale, non tutte le scelte sono valide e non portano tutte
 a costi validi.
\end_layout

\begin_layout Section
Esempi
\end_layout

\begin_layout Itemize
stack multipop
\end_layout

\begin_layout Itemize
contatore binario con incremento
\end_layout

\begin_layout Itemize

\series bold
tabelle dinamiche, 
\series default
possono cambiare la loro dimensione, per altre strutture come le tabelle
 hash dobbiamo stabilire la dimensione inizialmente, quindi introduzione
 di complessità della decisione con drawbacks e considerazioni.
 Quindi il concetto è quello di scegliere una tabella piccola, e quando
 non basta più si ricopia la tabella in na tabella più grande, i costi ammortizz
ati rimangono comunque gli stessi (le operazioni costose sono molte di meno
 rispetto a quelle meno costose).
\end_layout

\begin_layout Section
Stack con multipop
\end_layout

\begin_layout Itemize
pop(s) O(1)
\end_layout

\begin_layout Itemize
push(s,x) O(1)
\end_layout

\begin_layout Itemize
stackempty(s) O(1)
\end_layout

\begin_layout Standard
abbiamo una operazione aggiuntiva di multipop
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithm} 	
\end_layout

\begin_layout Plain Layout

	
\backslash
caption{Multipop(stack,k)}
\end_layout

\begin_layout Plain Layout

	
\backslash
hspace*{
\backslash
algorithmicindent} 
\backslash
textbf{Input: } 
\backslash
text{$stack$: stack with multipop operation}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

		
\backslash
hspace*{2,1cm}
\backslash
text{$k$: number of elements to multipop}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

	
\backslash
hspace*{
\backslash
algorithmicindent} 
\backslash
textbf{Output: } 
\backslash
text{nothing}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{algorithmic}[1]
\end_layout

\begin_layout Plain Layout

		
\backslash
Function{classifyPropagation}{stack,$k$}
\end_layout

\begin_layout Plain Layout

		
\backslash
While {$k>0 
\backslash
vee !stackempty(stack)$}     
\end_layout

\begin_layout Plain Layout

			
\backslash
State pop(stack)
\end_layout

\begin_layout Plain Layout

			
\backslash
State k $
\backslash
gets$ k-1
\end_layout

\begin_layout Plain Layout

		
\backslash
EndWhile
\end_layout

\begin_layout Plain Layout

		
\backslash
EndFunction
\end_layout

\begin_layout Plain Layout

	
\backslash
end{algorithmic}  	
\end_layout

\begin_layout Plain Layout


\backslash
end{algorithm}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
costo di 
\begin_inset Formula $O(min(|stack|,k))$
\end_inset


\end_layout

\begin_layout Standard
costo di una singola multipop
\end_layout

\begin_layout Standard
stack inizialmente vuoto, abbiamo n operazioni.
\end_layout

\begin_layout Section
Contatore binario con incremento
\end_layout

\begin_layout Standard
classico contatore binario, ovviamente non possiamo sforare i minimi dell'array
\end_layout

\begin_layout Standard
caso peggiore O(k) per singolo incremento
\end_layout

\begin_layout Standard
caso peggiore O(nk) per n incrementi, anche se è una sovrastima del valore
 effettivo, non è tight
\end_layout

\begin_layout Section
Analisi problemi precedenti
\end_layout

\begin_layout Subsection
aggregazione
\end_layout

\begin_layout Standard
stimare il costo di T(n) di n operazioni e di equidistribuire il costo tra
 le n operazioni 
\begin_inset Formula $\frac{T(n)}{n}$
\end_inset

 senza prendere scorciatoie.
\end_layout

\begin_layout Subsubsection
Stack
\end_layout

\begin_layout Standard
condizione: stack inizialmente vuoto
\end_layout

\begin_layout Standard
pop e push operazioni base
\end_layout

\begin_layout Standard
multipop operazione derivata
\end_layout

\begin_layout Standard
\begin_inset Formula $op_{1},...,op_{n}\in\{pop,push,multipop\}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $op_{1}^{,},...,op_{n}^{,}\in\{pop,push\}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $<op_{1}^{,},...,op_{n}^{,}>=<op_{1},...,op_{n}>=m$
\end_inset


\end_layout

\begin_layout Standard
traduzione di più pop consecutivi in multipop, esempio di come passare da
 una sequenza all'altra.
\end_layout

\begin_layout Standard
\begin_inset Formula $\#pop(successioneNoM)\leq\#push(successioneNoM)=\#push(successioneM)\leq n$
\end_inset


\end_layout

\begin_layout Standard
pertanto 
\begin_inset Formula $\#pop(successioneNoM)\leq n$
\end_inset

, after altre derivazioni stupide abbiamo 
\begin_inset Formula $T(n)\leq2n\implies\frac{T(n)}{n}\leq2$
\end_inset

.
\end_layout

\begin_layout Subsubsection
contatore binario
\end_layout

\begin_layout Standard
Mi secca riscrivere per ora, quindi guardo e scrivo le cose base
\end_layout

\begin_layout Standard
cambiamento dei bit k per 
\begin_inset Formula $\lfloor\frac{n}{2^{k}}\rfloor$
\end_inset

 durante tutte le operazioni
\end_layout

\begin_layout Standard
\begin_inset Formula $T(n)=$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
sum
\backslash
limits_{i=0}^{k-1} 
\backslash
frac{n}{2^i}<
\backslash
sum
\backslash
limits_{i=0}^{
\backslash
inf}
\backslash
frac{n}{2^i}=2n$
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Accantonamenti
\end_layout

\begin_layout Standard
definizione personale di costi ammortizzati, che ci aiuteranno a definire
 i costi reali, la somma dei costi ammortizzati sia un limite superiore
 di quelli reali quindi:
\end_layout

\begin_layout Standard
\begin_inset Formula $\sum_{i=1}^{n}c_{i}\leq\sum_{i=1}^{n}c'_{i}$
\end_inset


\end_layout

\begin_layout Standard
bisogna avere una buona politica per decidere i costi ammortizzati
\end_layout

\begin_layout Standard
lo schema deve essere valido secondo il vincolo definito precedentemente
\end_layout

\begin_layout Standard
Da rivedere sia la lezione che i vari concetti perché è tutto importante.
\end_layout

\begin_layout Subsection
Potenziale
\end_layout

\begin_layout Standard
ammontare dei crediti/cassa viene chiamato potenziale, alla struttura dati
 viene assegnato una funzione potenziale(preso dalla fisica, ogni configurazione
 ha un potenziale che gli permette di cambiare stato grazie all'energia
 accumulata), 
\begin_inset Formula $\phi(D_{i})$
\end_inset

 funzione potenziale per ogni configurazione.
\end_layout

\begin_layout Standard
useremo questa funzione potenziale per definire il costo ammortizzato.
\end_layout

\begin_layout Standard
\begin_inset Formula $c_{i}^{o}=c_{i}+\phi(D_{i})-\phi(D_{i-1})$
\end_inset

 costo ammortizzato sulla base del costo reale e dei potenziali, la regola
 
\begin_inset Formula $\sum_{i=1}^{n}c_{i}\leq\sum_{i=1}^{n}c'_{i}$
\end_inset

deve valere comunque, si trova una semplificazione equivalente alla precedente,
 si unrolla la sommatoria e si eliminano i termini opposti, sopravvivono
 i costi reali e 
\begin_inset Formula $\phi(D_{0})$
\end_inset

 e 
\begin_inset Formula $\phi(D_{n})$
\end_inset

.
 La regola guardatela dalla lezione e dal libro, mi secca scriverla
\end_layout

\begin_layout Standard

\series bold
Lemma:
\series default
 
\begin_inset Formula $\sum_{i=1}^{n}c_{i}\leq\sum_{i=1}^{n}c'_{i}\iff\phi(D_{0})\leq\phi(D_{n})$
\end_inset


\end_layout

\begin_layout Subsection
Tabelle dinamiche
\end_layout

\begin_layout Standard
hanno la loro applicazionne quando si deve allocare una tabella con dimensione
 non definita.
\end_layout

\begin_layout Standard
Ottimo esempio di analisi ammortizzata.
\end_layout

\begin_layout Standard
Viene definita una dimensione di tabella = 0 per eleganza e completezza
 di definizione.
\end_layout

\begin_layout Standard
fattore di carico come (quantità di posti occupati/dimensione tabella)
\end_layout

\begin_layout Standard
quando si arriva alla fine della tabella, si alloca una nuova tabella con
 il doppio della dimensione
\end_layout

\begin_layout Standard
l'inserimento più costoso è quello di indice 
\begin_inset Formula $2^{k-1}+1$
\end_inset

 dove deve essere creata una nuova tabella e copiata quella vecchia.
 
\end_layout

\end_body
\end_document
